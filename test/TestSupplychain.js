// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    const productNotes = "Best beans for Espresso";
    const productPrice = 100;
    const farmerID = accounts[1];
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];

    before(async () => {
        // setup roles
        const supplyChain = await SupplyChain.deployed();

        await supplyChain.setRole(farmerID, 1); // set Farmer role
        await supplyChain.setRole(distributorID, 2); // set Distributor role
        await supplyChain.setRole(retailerID, 3); // set Retailer role
        await supplyChain.setRole(consumerID, 4); // set Consumer role
    });

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        const supplyChain = await SupplyChain.deployed();

        const { logs } = await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
        assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
        assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID");
        assert.equal(
            resultBufferOne[3],
            originFarmerID,
            "Error: Missing or Invalid originFarmerID"
        );
        assert.equal(
            resultBufferOne[4],
            originFarmName,
            "Error: Missing or Invalid originFarmName"
        );
        assert.equal(
            resultBufferOne[5],
            originFarmInformation,
            "Error: Missing or Invalid originFarmInformation"
        );
        assert.equal(
            resultBufferOne[6],
            originFarmLatitude,
            "Error: Missing or Invalid originFarmLatitude"
        );
        assert.equal(
            resultBufferOne[7],
            originFarmLongitude,
            "Error: Missing or Invalid originFarmLongitude"
        );
        assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Harvested", "Invalid event emitted");
    });

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 2;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        const { logs } = await supplyChain.processItem(upc, { from: farmerID });

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo.itemState, 1, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Processed", "Invalid event emitted");
    });

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 3;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        const { logs } = await supplyChain.packItem(upc, { from: farmerID });

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo.itemState, 2, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Packed", "Invalid event emitted");
    });

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 4;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        await supplyChain.packItem(upc, { from: farmerID });
        const { logs } = await supplyChain.sellItem(upc, productPrice, { from: farmerID });

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferTwo.itemState, 3, "Error: Invalid item State");
        assert.equal(resultBufferTwo.productPrice, productPrice, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "ForSale", "Invalid event emitted");
    });

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 5;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        await supplyChain.packItem(upc, { from: farmerID });
        await supplyChain.sellItem(upc, productPrice, { from: farmerID });
        const { logs } = await supplyChain.buyItem(upc, {
            from: distributorID,
            value: 2 * productPrice,
        });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne.ownerID, distributorID, "Error: wrong ownerID");
        assert.equal(resultBufferTwo.distributorID, distributorID, "Error: wrong distributorID");
        assert.equal(resultBufferTwo.itemState, 4, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Sold", "Invalid event emitted");
    });

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 6;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        await supplyChain.packItem(upc, { from: farmerID });
        await supplyChain.sellItem(upc, productPrice, { from: farmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: 2 * productPrice });
        const { logs } = await supplyChain.shipItem(upc, { from: distributorID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne.ownerID, distributorID, "Error: wrong ownerID");
        assert.equal(resultBufferTwo.itemState, 5, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Shipped", "Invalid event emitted");
    });

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 7;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        await supplyChain.packItem(upc, { from: farmerID });
        await supplyChain.sellItem(upc, productPrice, { from: farmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: 2 * productPrice });
        await supplyChain.shipItem(upc, { from: distributorID });
        const { logs } = await supplyChain.receiveItem(upc, { from: retailerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne.ownerID, retailerID, "Error: wrong ownerID");
        assert.equal(resultBufferTwo.retailerID, retailerID, "Error: wrong retailerID");
        assert.equal(resultBufferTwo.itemState, 6, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Received", "Invalid event emitted");
    });

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        const upc = 8;

        await supplyChain.harvestItem(
            upc,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude,
            productNotes,
            { from: farmerID }
        );
        await supplyChain.processItem(upc, { from: farmerID });
        await supplyChain.packItem(upc, { from: farmerID });
        await supplyChain.sellItem(upc, productPrice, { from: farmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: 2 * productPrice });
        await supplyChain.shipItem(upc, { from: distributorID });
        await supplyChain.receiveItem(upc, { from: retailerID });
        const { logs } = await supplyChain.purchaseItem(upc, { from: consumerID });

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        assert.equal(resultBufferOne.ownerID, consumerID, "Error: wrong ownerID");
        assert.equal(resultBufferTwo.consumerID, consumerID, "Error: wrong consumerID");
        assert.equal(resultBufferTwo.itemState, 7, "Error: Invalid item State");
        assert.equal(logs.length, 1, "Event missing");
        assert.equal(logs[0].event, "Purchased", "Invalid event emitted");
    });
});
